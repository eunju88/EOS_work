- 아래 블로그에서 FTP 설정 까지만 진행(EOS 설치는 시간이 너무 오래걸려서 다른 것 이용)
기본 ubuntu 버전은 18.03 버전.
ubuntu 16.04 버전으로 받는 게 더 좋음
https://m.blog.naver.com/blokorea/221313637939

- FTP까지 설정 다 한 후 ubuntu 실행해서 계정 만들고 아래 두개 명령어 실행
wget https://github.com/eosio/eos/releases/download/v1.8.1/eosio_1.8.1-1-ubuntu-16.04_amd64.deb
sudo apt install ./eosio_1.8.1-1-ubuntu-16.04_amd64.deb

- 아래 명령어로 eosio-cli-helper 깃 설치
git clone https://github.com/Hexlant/eosio-cli-helper.git

- cd eosio-cli-helper
vi configuration_info.sh 에서 아래 데이터변경 후 저장(ESC 후 :wq)
## Host for NODEOS
NODEOS_SCHEMA="https"
NODEOS_HOST="jungle2.cryptolions.io"

## Port for NODEOS
NODEOS_PORT="443"


※ https://jungle2.cryptolions.io:443 이 접속이 안될 경우
https://monitor.jungletestnet.io/#home
접속하여 API endpoints 메뉴에 뜨는 다른 URL을 적용해본다.

- ./cleos.sh get info 로 노드 정보 가져오기
정상 동작하면 정상 설치 완료

- cleos 명령어 자동완성 기능 사용을 위해 설치
cd ~/
git clone https://github.com/hexlant/cleos-auto-completion
cd cleos-auto-completion
echo “source $(pwd)/cleos.bash” >> ~/.bashrc

source $(pwd)/cleos.bash

- 백그라운드에서 키오스드 자동 실행 시키기
nohup keosd &

- 키오스 스타트
./keosd_start.sh


- 지갑 만들기(지갑명 eoswallet)
./cleos.sh wallet create -n "eoswallet" --to-console

=> 위와 같이 실행 시 아래 결과가 나옴(password 정보 노출됨)
Creating wallet: eoswallet
Save password to use in the future to unlock this wallet.
Without password imported keys will not be retrievable.
"PW5Ht2MVnw9CW6j5kZbThedDyi72szUDbqRqM5ruFznoWvsdCtvxj"

- 지갑 계정 리스트 확인(좀전에 생성한 eoswallet 이 뜬다.)
./cleos.sh wallet list
unlock 된 월렛 리스트만 뜬다.

- 지갑을 unlock 상태로 만들어줌(전송 등 할 수 있다.)
./cleos.sh wallet unlock -n eoswallet --password PW5Ht2MVnw9CW6j5kZbThedDyi72szUDbqRqM5ruFznoWvsdCtvxj

eosio-wallet/config.ini 파일에서
-> unlock 시간 시간 설정 가능. unlock-timeout = 900 -> 모두 주석처리 되어있으면 디폴트 값

- 키 생성
./cleos.sh create key --to-console
=>
Private key: 5JeqGuVt79ZUeQh1rekay7zGoutW7pzoCQR8Awr4fvuQ8oykv3D
Public key: EOS5ZZepQMirgVm94LjSZqFohn8pkXHQaT5aHD8ZZzYfCkc99zJkP

- 키 등록 및 확인
./cleos.sh wallet import -n eoswallet
-> Private key를 저장.
명령어 후 위에서 출력된 Private key 입력하면 위에서 등록된 Public key 키가 나온다.

./cleos.sh wallet keys 하면 방금 등록한 Public key 가 나온다.(같은 지 확인)

- 계정 생성
  계정 생성 시 EOS가 소모되는데 현재 보유중인 EOS가 없으니 jungle 테스트 사이트에 접속하여 계정생성을 한다.
https://monitor.jungletestnet.io/#account
사이트에 접속 후 create account로 account 생성

계정명은 무조건 12글자로 맞춰야함. 특수문자 불가능.
eoseunjutest

- 계정정보 확인
./cleos.sh get account eoseunjutest

- 테스트넷(정글)에서 eos 발행
Faucet에서 아이디 입력하면 100EOS 발행해줌.
- 6시간에 1번씩 요청 가능.

- 아래 명령어 두개를 통해서 현재 보유중인 어카운트 확인 가능.
./cleos.sh get account eoseunjutest
-> 종합적인 계정정보 EOS만 노출됨
./cleos.sh get currency balance eosio.token eoseunjutest
-> 정글 토큰도 같이 발급해줌.

- EOS 전송
./cleos.sh transfer eoseunjutest getredpengio "1.2 EOS"

현재는 트랜젝션 ID로 검사 불가능.. jungle에서 막아논 듯..
7716ce53fa0856c8e82de9326f6701024fe7293d98e33eb17186604d74ad37e9

- stake, Delegate(EOS 구성요소) 현황 확인
./close.sh system listbw eoseunjutest

- 자원 임대 하기 실습
일단 현재 나의 계정 정보에서 정보 확인
./cleos.sh get account eoseunjutest

staking 한 net eos, cpu eos 할당.
./cleos.sh system delegatebw (From) (Receiver) “Staking 할 NET EOS” “Staking 할 CPU EOS”
./cleos.sh system delegatebw eoseunjutest eoseunjutest "2 EOS" "3 EOS"

다시 나의 계정 정보 확인
./cleos.sh get account eoseunjutest
net bandwidth의 staked가 1->2 EOS로 늘었고
cpu bandwidth의 stacked 가 1->4 EOS로 늘었다.
EOS balances에서는 5 EOS가 줄었음.

net bandwidth, cpu bandwidth는 24시간 후 자원이 반환된다.(ram은 자원 반환 안됨)
발송되는 msg가 많으면 net bandwidth 사용량이 많고,
내부적으로 프로세스가 많이 돌면 cpu bandwidth 사용량이 많음.


- ram 사고팔기
살때는 기본적으로 EOS로 구매
./cleos.sh  system buyram eoseunjutest eoseunjutest "1 EOS"
팔때는 Byte로 판매 
./cleos.sh system sellram eoseunjutest 1000

- eos 컴파일러 받고 설치
ubuntu 계열 install은 제공하지 않는다. Debian Package Install을 보고 인스톨 하면 됨.
기존에 다른 버전이 설치 되었을 경우 아래 명령어로 삭제
sudo apt remove eosio.cdt

컴파일러 설치
wget https://github.com/eosio/eosio.cdt/releases/download/v1.6.1/eosio.cdt_1.6.1-1_amd64.deb
sudo apt install ./eosio.cdt_1.6.1-1_amd64.deb

EOS 컴파일러 버전 1.6.0 에서는 컨트렉트 배포 시 다음과 같은 오류가 있어 1.6.1 버전으로 설치한다.
user@DESKTOP-H3L06JR:~/eosio-cli-helper$ ./cleos.sh set contract aladintester ~/hello
Reading WASM from /home/user/hello/hello.wasm...
Publishing contract...
Error 3070003: Serialization Error Processing WASM
Error Details:
invalid index: localIndex>=locals.size()
pending console output:
user@DESKTOP-H3L06JR:~/eosio-cli-helper$ eosio-cpp --version
eosio-cpp version 1.6.0


- 스마트 컨트랙트 만들기.
홈으로 이동
cd ~
폴더 생성
mkdir hello
파일 생성
vi hello.cpp

내용 입력 참고
https://eosio.github.io/eosio.cdt/1.6.0/guides/first-smart-contract.html

컴파일 실행
eosio-cpp -abigen hello.cpp -o hello.wasm

실행 시 우분투 16 버전은 아래와 같은 오류가 뜰 수 있다.
Warning, action <hi> does not have a ricardian contract
/usr/opt/eosio.cdt/1.6.0/bin/clang-7: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.22' not found (required by /usr/opt/eosio.cdt/1.6.0/bin/clang-7)
/usr/opt/eosio.cdt/1.6.0/bin/wasm-ld: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.22' not found (required by /usr/opt/eosio.cdt/1.6.0/bin/wasm-ld)


sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install gcc-4.9
sudo apt-get upgrade libstdc++6
입력하고 컴파일 시도 하면  정상 작동한다. 참고 글
https://github.com/lhelontra/tensorflow-on-arm/issues/13


실행 후 ls 로 파일 확인 하면 hello.abi, hello.wasm 파일이 생성된다.
(다른 버전으로 이미 컴파일 되었다면 다시 컴파일 해줘야한다.)


컨트랙트 발급 받으려면 계정이 1개 더 필요하다.

위에 계정생성 참고하여 1개 더 만들 것.
eoseunjutst2

- 컨트렉트 배포
./cleos.sh set contract eoseunjutst2 ~/hello

// 이미 컴파일 된 컨트렉트를 배포 할 경우 
// 아래는 폴더위치와 컴파일 된 파일명을 명시 해주었다. 폴더명과 컴파일 된 파일명이 다를 경우 아래 방법을 사용한다.(정석)
./cleos.sh set contract eoseunjutst2 ~/contract eosio.token.wasm eosio.token.abi

컨트렉트 실행 시 아래와 같은 메시지가 나타난다면 해당 계정에 RAM을 구입해준다.
Publishing contract...
Error 3080001: Account using more than allotted RAM usage
Error Details:
account eoseunjutst2 has insufficient ram; needs 12526 bytes has 5494 bytes

./cleos.sh  system buyram eoseunjutst2 eoseunjutst2 "1 EOS"


RAM 구매 후 다시 실행하면
class3@DESKTOP-K070R8H:~/eosio-cli-helper$ ./cleos.sh set contract eoseunjutst2 ~/hello
Reading WASM from /home/class3/hello/hello.wasm...
Publishing contract...
executed transaction: fa526c72c172dff2c0a3c515a828589850238e6f709e486f056bf919b2a09ddd  728 bytes  424 us
#         eosio <= eosio::setcode               {"account":"eoseunjutst2","vmtype":0,"vmversion":0,"code":"0061736d0100000001370b6000017f60027f7f006...
#         eosio <= eosio::setabi                {"account":"eoseunjutst2","abi":"0e656f73696f3a3a6162692f312e3100010268690001026e6d046e616d650100000...
warning: transaction executed locally, but may not be confirmed by the network yet         ]


- 컨트렉트 실행
./cleos.sh push action eoseunjutst2 hi '["eoseunjutst2"]' -p eoseunjutst2@active

./cleos.sh push action eoseunjutst2 hi '["eoseunjutst2"]' -p eoseunjutst2@active
./cleos.sh push action 컨트렉트배포자계정 함수 '["파라미터계정"]' -p 실행하는계정@active

class3@DESKTOP-K070R8H:~/eosio-cli-helper$ ./cleos.sh push action eoseunjutst2 hi '["eoseunjutst2"]' -p eoseunjutst2@active
executed transaction: 668e2e53bdfe05fd0671b86e189544b3dfdb6a827f3079d1284c469561633374  104 bytes  144 us
#  eoseunjutst2 <= eoseunjutst2::hi             {"nm":"eoseunjutst2"}
>> Hello, eoseunjutst2
warning: transaction executed locally, but may not be confirmed by the network yet         ]

- 해당 계정으로 올린 스마트 컨트렉트 확인하기
./cleos.sh get abi eoseunjutst2

- 여태 사용한 명령어 로그 확인하기
history

- 컨트렉트 권한 알아보기 require_auth
vi ~/hello/hello.cpp 로 파일 수정

hi 액션(메소드) 아래에 bye 액션 추가
[[eosio::action]]
void bye(eosio::name nm) {
      require_auth(nm);
      eosio::print_f("Bye, %\n", nm);
}

실행하는계정과 파라미터로 넘기는 계정이 다른 경우 권한설정에 걸려 실행이 되지 않는다.

./cleos.sh push action eoseunjutst2 bye '["eoseunjutest"]' -p eoseunjutst2@active
./cleos.sh push action 컨트렉트배포자계정 함수 '["파라미터계정"]' -p 실행하는계정@active

class3@DESKTOP-K070R8H:~/eosio-cli-helper$ ./cleos.sh push action eoseunjutst2 bye '["eoseunjutest"]' -p eoseunjutst2@active
Error 3090004: Missing required authority
Ensure that you have the related authority inside your transaction!;
If you are currently using 'cleos push action' command, try to add the relevant authority using -p option.
Error Details:
missing authority of eoseunjutest
pending console output:


- EOS 테이블 이해하기
https://eosio.github.io/eosio.cdt/1.6.0/group__contracts.html

https://medium.com/itam/eos-%EC%8A%A4%EB%A7%88%ED%8A%B8-%EC%BB%A8%ED%8A%B8%EB%9E%99%ED%8A%B8%EC%97%90%EC%84%9C-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%A0%95%EB%B3%B4-%EB%8B%A4%EB%A3%A8%EA%B8%B0-3a4ba6250cf4

- Multi Index Tables Example
https://developers.eos.io/eosio-cpp/docs/using-multi-index-tables

- Multi-Index DB API
https://developers.eos.io/eosio-cpp/docs/db-api

- 테이블 실습
#include <eosio/eosio.hpp>
using namespace eosio;

class [[eosio::contract]] calculator : public eosio::contract {
    public:
        using eosio::contract::contract;

     // using eosio::contract::contract
     calculator(name receiver, name code, datastream<const char*> ds):contract(receiver, code, ds){}

    [[eosio::action]]
    void add(name user, uint64_t a, uint64_t b) {
        uint64_t result = a+b;
        eosio::print_f("a + b = %\n", result);
        // get_self() -> ram 지불할 사용자
        // get_first_receiver().value 파라미터 값
        operation_index operation_tbl(get_self(), get_first_receiver().value);
        auto iterator = operation_tbl.find(user.value);
        if(iterator == operation_tbl.end()){
        	// emplace => DB에 insert 값
        	operation_tbl.emplace(user, [&]( auto& row) {
                row.key = user;
                row.a = a;
                row.b = b;
                row.result = result;
       	 });
        } else {
	operation_tbl.modify(iterator, user, [&]( auto& row ) {
                row.key = user;
                row.a = a;
                row.b = b;
                row.result = result;
       	 });
        }
    }

    [[eosio::action]]
    void sub(name user, uint64_t a, uint64_t b) {
        uint64_t result = a-b;
        eosio::print_f("a - b = %\n", result);
        operation_index operation_tbl(get_self(), get_first_receiver().value);
        operation_tbl.emplace(user, [&]( auto& row) {
                row.key = user;
                row.a = a;
                row.b = b;
                row.result = result;
        });
    }

    [[eosio::action]]
    void div(name user, uint64_t a, uint64_t b) {
        uint64_t result = a/b;
        eosio::print_f("a / b = %\n", result);
        operation_index operation_tbl(get_self(), get_first_receiver().value);
        operation_tbl.emplace(user, [&]( auto& row) {
                row.key = user;
                row.a = a;
                row.b = b;
                row.result = result;
        });
    }

    [[eosio::action]]
    void multi(name user, uint64_t a, uint64_t b) {
        uint64_t result = a*b;
        eosio::print_f("a * b = %\n", result);
        operation_index operation_tbl(get_self(), get_first_receiver().value);
        operation_tbl.emplace(user, [&]( auto& row) {
                row.key = user;
                row.a = a;
                row.b = b;
                row.result = result;
        });
    }

     [[action]]
     void erase(name user) {
        operation_index operation_tbl(get_self(), get_first_receiver().value);
        auto iterator = operation_tbl.find(user,value);
        // check(iterator);
        operation_tbl.erase(iterator);
     }
     private :
        struct [[eosio::table]] operation {
                name key;
                uint64_t a;
                uint64_t b;
                uint64_t result;
                uint64_t primary_key() const {return key.value;}
        };
        typedef eosio::multi_index<"operation"_n, operation> operation_index;
};

* 컴파일
eosio-cpp -abigen calculator.cpp -o calculator.wasm

- ~/eosio-cli-helper 에서 배포
./cleos.sh set contract eoseunjutst2 ~/calculator

- ~/eosio-cli-helper에서 실행
./cleos.sh push action eoseunjutst2 add '["eoseunjutst2",1, 4]' -p eoseunjutst2@active

- 테이블 확인
./cleos.sh get table eoseunjutst2 eoseunjutst2 operation

- 테이블 삭제
./cleos.sh push action eoseunjutst2 erase '["eoseunjutst2"]' -p eoseunjutst2@active

-> 테이블 삭제 확인
./cleos.sh get table eoseunjutst2 eoseunjutst2 operation


- EOSIO 시스템 컨트렉트 코드
https://github.com/EOSIO/eosio.contracts


- EOS token 발행 실습
소스 파일 contract 폴더(컴파일 완료)

- 배포
./cleos.sh set contract eoseunjutst2 ~/contract eosio.token.wasm eosio.token.abi

EOS는 배포한 순간 토큰이 생성되지 않는다.
create 함수를 실행 해줘야 한다. -> 생성
// create 발행자 asset(발행 숫자 + 소수점 4자리까지 + 심볼)
./cleos.sh push action eoseunjutst2 create '["eoseunjutst2", "10000.0000 EUX"]' -p eoseunjutst2

-> 실제적으로 balance가 들어가 있지 않다. issue를 실행 해줘야만 잔고로 들어간다.

// issue 받을 사람, 전송할 양, 메시지 -> 발행
./cleos.sh push action eoseunjutst2 issue '["eoseunjutst2", "10000.0000 EUX", "send you"]' -p eoseunjutst2
-> create 해준 양 보다 더 많이 발송할 수는 없다. = 에러나
-> 이 컨트렉트는 발행자에게만 주게 되어있음.
./cleos.sh push action eoseunjutst2 issue '["sem121sem121", "10000.0000 EUX", "send you"]' -p eoseunjutst2
=> 에러나ㅠㅠㅠㅠ 안되ㅠㅠㅠㅠ 컨트렉트가 막아놨옹..

// 잔고 확인
./cleos.sh get table eoseunjutst2 eoseunjutst2 accounts

- 소각하기
./cleos.sh push action eoseunjutst2 retire '["10.0000 EUS", "retire token"]' -p eoseunjutst2


./cleos.sh get info 와
curl  -- request POST --url http://jungle2.cryptolions.io/v1/chain/get_info 의 결과 값은 같다.
(보기는 좀 다르지만 내용은 같다.)

다만 아래 명령어는 너무 길고 외우기도 어렵다. 이것을 좀 더 편하게 사용하기 위하여 eosjs 를 사용한다.

- 소스
https://github.com/EOSIO/eosjs

